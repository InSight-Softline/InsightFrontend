image: node:20 

stages:          
  - test
  - build
  - release
  - release-fullstack
  - deploy


.setupNpm:
  image: node:20
  before_script:
    - cd $(pwd)/frontend
    - npm i

    

.setupCypress:
  image: cypress/base:latest
  before_script:
    - cd $(pwd)/frontend
    - npx cypress install
    - npm i


#TESTING STAGE
test-e2e:
  stage: test
  extends:
    - .setupCypress
  script:
    - echo "Running Cypress e2e tests..."
    - npm run dev &                             # Start the server in the background
    - sleep 20                                  # Wait for the server to start (adjust time as needed)
    - npx cypress run                           # Run Cypress end-to-end tests
    - echo "Cypress e2e tests completed"
  artifacts:
    paths:
      - cypress/screenshots/
      - cypress/videos/
    expire_in: 1 week


#test-integration:
 # stage: test
  #extends:
    #- .setupCypress
 # script:
   # - echo "Running integration tests..."
   # - npm run dev &                          # Start the server in the background
   # - sleep 20                               # Wait for the server to start (adjust time as needed)
   # - npm run integration-test               # Run integration tests
   # - echo "Integration tests completed"
  #artifacts:
  #  paths:
      #- cypress/screenshots/
      #- cypress/videos/
    #expire_in: 1 week

test-lint:
  stage: test
  extends:
    - .setupNpm
  script:
    - echo "Running linting..."
    #- pwd                                        # use for debugging
    #- ls                                         # use for debugging
    - npm run lint                                # Run ESLint for linting
    - echo "Linting completed"



sonarqube-check:
  stage: test
  image: 
    name: sonarsource/sonar-scanner-cli:5.0
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner
  allow_failure: true
  #only:
    #- merge_requests
    #- master
    #- main
    #- develop


# BUILD STAGE
frontend-build-job:       
  image: node:20 
  stage: build
  environment: production
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"
  script:
    - echo "Building the application..."
    - cd frontend
    - npm cache clean --force
    - npm install  
    - npm run build -- --mode=production
    - echo "Building complete!"
  artifacts:
    paths:
      - frontend/dist/

# BUILD STAGE
frontend-build-job-fullstack:       
  image: node:20 
  stage: build
  environment: production
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"
  allow_failure: true
  script:
    - echo "Building the application..."
    - cd frontend
    - npm cache clean --force
    - npm install  
    - npm run build -- --mode=fullstack
    - echo "Building complete!"
  artifacts:
    paths:
      - frontend/dist/

#RELEASE STAGE
docker-release-job:
  image: docker:20
  stage: release
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  dependencies:
    - frontend-build-job
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"
  script:
    - echo "Building & Deploying Docker Image...."
    - docker logout
    - echo -n $DOCKER_LOGIN | docker login --username eschybol1 --password-stdin
    - echo -n "${CI_DEPLOY_PASSWORD}" | docker login $CI_REGISTRY -u $CI_DEPLOY_USER --password-stdin # Authenticate against the GitLab container registry
    - cd frontend
    - docker build -t gitlab.dit.htwk-leipzig.de:5050/projekt2024-s-audit-tool/frontend:latest .
    - docker push gitlab.dit.htwk-leipzig.de:5050/projekt2024-s-audit-tool/frontend:latest    
    - echo "[*] Image Build & Deployment was executed."


#RELEASE STAGE
docker-release-job-fullstack:
  image: docker:20
  stage: release
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  dependencies:
    - frontend-build-job-fullstack
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"
  allow_failure: true
  script:
    - echo "Building & Deploying Docker Image...."
    - docker logout
    - echo -n $DOCKER_LOGIN | docker login --username eschybol1 --password-stdin 
    - echo -n "${CI_DEPLOY_PASSWORD}" | docker login $CI_REGISTRY -u $CI_DEPLOY_USER --password-stdin # Authenticate against the GitLab container registry
    - cd frontend
    - docker build -t gitlab.dit.htwk-leipzig.de:5050/projekt2024-s-audit-tool/frontend:fullstack .
    - docker push gitlab.dit.htwk-leipzig.de:5050/projekt2024-s-audit-tool/frontend:fullstack    
    - echo "[*] Image Build & Deployment was executed."

#DEPLOYMENT STAGE ...
publish-job:      
  image: ubuntu:24.04
  stage: deploy
  variables:
    DOCKER_IMAGE: gitlab.dit.htwk-leipzig.de:5050/projekt2024-s-audit-tool/frontend:latest
    REMOTE_HOST: 141.57.8.208
    REMOTE_DOMAIN: https://sp08.imn.htwk-leipzig.de
    REMOTE_USERNAME: stud-fim  
  environment: 
    name: production
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"
  script:
    - apt update && apt upgrade -y
    - apt install ssh podman -y
    - mkdir -p ~/.ssh
    - echo "$PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H $REMOTE_HOST >> ~/.ssh/known_hosts
    - |
      ssh -i ~/.ssh/id_rsa $REMOTE_USERNAME@$REMOTE_HOST << EOF
      echo -n "${CI_DEPLOY_PASSWORD}" | podman login $CI_REGISTRY -u $CI_DEPLOY_USER --password-stdin
      podman pull $DOCKER_IMAGE
      podman stop insight-frontend
      podman rm insight-frontend
      podman run -d --name insight-frontend -p 80:80 $DOCKER_IMAGE
      EOF

