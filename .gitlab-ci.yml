image: node:20 # Specific version

stages:          # List of stages for jobs, and their order of execution
  - test
  - build
  - release
  - deploy

.setupCypress:
  image: cypress/base:10 # Change to a Cypress image
  before_script:
    - cd frontend
    - npm ci

# TESTING STAGE
# Testing Framework is Cypress https://docs.cypress.io/guides/guides/command-line
e2e-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  extends: .setupCypress
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    #- npm start &     # Start the server in the background
    #- npm run e2e     # Run Cypress tests
    - echo "Code coverage is 90%"

integration-test-job:
  image: node:20 # Specific version
  stage: test
  script:
    - echo "[*] Starting Integration Test...."
    - echo "[*] Integration Test coverage is 100%"

lint-test-job:   # This job also runs in the test stage.
  image: node:20 # Specific version
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - echo "No lint issues found."

# BUILD STAGE
frontend-build-job:       # This job runs in the build stage, which runs first.
  image: node:20 # Specific version
  stage: build
  environment: production
  script:
    - echo "Building the application..."
    - cd frontend
    - npm ci    
    - npm run build
    - echo "Building complete! :)"
  artifacts:
    paths:
      - frontend/dist/

docker-release-job:
  image: docker:20
  stage: release
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  dependencies:
    - frontend-build-job
  script:
    - echo "Building & Deploying Docker Image...."
    - docker logout
    - echo -n "${CI_DEPLOY_PASSWORD}" | docker login $CI_REGISTRY -u $CI_DEPLOY_USER --password-stdin # Authenticate against the GitLab container registry
    - cd frontend
    - docker build -t gitlab.dit.htwk-leipzig.de:5050/projekt2024-s-audit-tool/frontend .
    - docker push gitlab.dit.htwk-leipzig.de:5050/projekt2024-s-audit-tool/frontend    
    - echo "[*] Image Build & Deployment was executed."

# Deployment with SSH RCE
publish-job:      # This job runs in the deploy stage.
  image: ubuntu:24
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  variables:
    DOCKER_IMAGE: gitlab.dit.htwk-leipzig.de:5050/projekt2024-s-audit-tool/frontend:latest
    REMOTE_HOST: 141.57.8.208
    REMOTE_DOMAIN: https://sp08.imn.htwk-leipzig.de
    REMOTE_USERNAME: stud-fim  
  environment: 
    name: production
  script:
    - ssh $REMOTE_USERNAME@$REMOTE_HOST << 'EOF'
        echo -n "${CI_DEPLOY_PASSWORD}" | podman login $CI_REGISTRY -u $CI_DEPLOY_USER --password-stdin # Authenticate against the GitLab container registry
        podman pull $DOCKER_IMAGE
        podman stop insight || true
        podman rm insight || true
        podman run -d --name insight -p 80:80 $DOCKER_IMAGE
      EOF

# Note: Access credentials should be handled securely using CI/CD variables or secrets.
