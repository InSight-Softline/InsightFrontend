  # This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

image: node:20 #konkrete version

stages:          # List of stages for jobs, and their order of execution
  - test
  - build
  - deploy


.setupNpm:
  image: node:20
  before_script:
    - cd $(pwd)/frontend
    - npm install
    - npm install tailwindcss autoprefixer --save-dev  # Install tailwindcss as a dev dependenc

.setupCypress:
  image: cypress/base:latest
  before_script:
    - cd $(pwd)/frontend
    - npx cypress install
    - npm ci

#TESTING STAGE
#Testing Framework scheint cyprus zu werden https://docs.cypress.io/guides/guides/command-line
test-job:
  image: cypress/base:latest
  stage: test
  extends: 
    - .setupCypress
  #before_script:
    #- apt-get update -qq && apt-get install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libnss3 libxss1 libasound2 libxtst6 xauth xvfb
  script:
    - echo "Checking npm version..."                                #check npm version
    - npm --version
    - echo "Starting the server in the background..."
    - npm run dev &                                                   # Starten des Servers im Hintergrund
    - echo "Waiting for the server to start..."
    - sleep 20                                                      # Warten auf das Starten des Servers
    - echo "Running unit tests... This will take about 60 seconds." # e2e-test-job
    - npm run e2e
    - echo "Code coverage is 90%"
    - echo "[*] Starting Integration Test...."                      #integration-test-job
    - npm run integration-test
    - echo "[*] Integration Test coverage is 100 %"
    - echo "Linting code... This will take about 10 seconds."       #linit-test-job
    - npm run lint
    - echo "No lint issues found."

#BUILD STAGE
frontend-build-job:       # This job runs in the build stage, which runs first.
  image: node:20 #konkrete version
  stage: build
  environment: production
  extends: 
    - .setupNpm
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"
  script:
    - echo "Building the application..."
    - npm run build
    - echo "Building complete."

docker-deploy-job:
  image: docker:20
  stage: build
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""  
  rules:
   - if: $CI_COMMIT_REF_NAME == "main"
  script:
    - echo "${CI_DEPLOY_PASSWORD}"
    - echo "Building & Deploying Docker Image..."
    - docker logout
    - echo -n "${CI_DEPLOY_PASSWORD}" | docker login $CI_REGISTRY -u $CI_DEPLOY_USER --password-stdin #Authenticate against the gitlab container registry
    - cd $(pwd)/frontend
    - docker build -t gitlab.dit.htwk-leipzig.de:5050/projekt2024-s-audit-tool/frontend .
    - docker push gitlab.dit.htwk-leipzig.de:5050/projekt2024-s-audit-tool/frontend    
    - echo "[*] Image Build & Deployment was executed.."

publish-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: 
    name: production
    url: http://141.57.8.208
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed :)"
    # wir erstellen auf dem server einen docker runner, der aus der gitlab ci durch den projektnamen tag getriggert